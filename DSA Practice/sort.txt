Selection sort -> Select the minimum

for(i->n-2)
for each round of i start from i+1 to n and 
    find the minimum
    Swap with arr[i];
    // O(n^2)
void selection_sort(int arr[], int n) {
  // selection sort
  for (int i = 0; i < n - 1; i++) {
    int mini = i;
    for (int j = i + 1; j < n; j++) {
      if (arr[j] < arr[mini]) {
        mini = j;
      }
    }
    int temp = arr[mini];
    arr[mini] = arr[i];
    arr[i] = temp;
  }




Bubble sort -> Bubble the maximum to the right (last elem)

for each round of i start from 0 to n-1
    for each j start from 0 to n-i-1 // if we don't do that when j=n-1 then j+1 will be out of bound

        if arr[j] > arr[j+1] //Buble of adjusant 2 element
           adjusant swap(arr[j], arr[j+1])

    // O(n^2)
//bubble sort
       for(int i=0; i<arr.length-1; i++) {
           for(int j=0; j<arr.length-i-1; j++) {
               if(arr[j] > arr[j+1]) {
                   //swap
                   int temp = arr[j];
                   arr[j] = arr[j+1];
                   arr[j+1] = temp;
               }
           }
       }




Insertion sort -> Insert the current element to the right position

for each round of i start from 0 to n-1
    for each j start from i  j>0
        if arr[j] < arr[j-1]



        void insertion_sort(int arr[], int n) {
    for (int i = 0; i <= n - 1; i++) {
        int j = i;
        while (j > 0 && arr[j - 1] > arr[j]) {
            int temp = arr[j - 1];
            arr[j - 1] = arr[j];
            arr[j] = temp;
            j--;
        }
    }


